{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ECommerce RestAPI",
    "description": "My ECommerce RestAPI Project Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3010",
  "basePath": "/",
  "tags": [
    {
      "name": "Register",
      "description": "API for register in the system"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/auth/create": {
      "post": {
        "tags": ["Register"],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Login"],
        "description": "Login user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to logged-in",
            "schema": {
              "$ref": "#/definitions/UserLogged"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "User is logged-in",
            "schema": {
              "$ref": "#/definitions/UserLogged"
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Current user",
        "tags": ["Login"],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/UserLogged"
            }
          }
        }
      }
    },
    "/products/all": {
      "get": {
        "summary": "Get all products in system",
        "tags": ["Products"],
        "responses": {
          "200": {
            "description": "Products",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        }
      }
    },
    "/products/create": {
      "post": {
        "tags": ["Products"],
        "summary": "Create new product in system",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "description": "Product that we want to create",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New product is created",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        }
      }
    },
    "/products/{myid}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of product that we want to find",
          "type": "string"
        }
      ],
      "delete": {
        "summary": "Delete product with given ID",
        "tags": ["Products"],
        "responses": {
          "200": {
            "description": "Product is deleted",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        }
      }
    },
    "/products/{id}": {
      "put": {
        "summary": "Update product with given ID",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of product that we want to find",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product is update",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        }
      }
    },
    "/carts/all": {
      "get": {
        "summary": "Get all carts in system",
        "tags": ["Carts"],
        "responses": {
          "200": {
            "description": "Carts",
            "schema": {
              "$ref": "#/definitions/Carts"
            }
          }
        }
      }
    },
    "/carts/create": {
      "post": {
        "tags": ["Carts"],
        "summary": "Create new cart in system",
        "parameters": [
          {
            "name": "cart",
            "in": "body",
            "description": "Cart that we want to create",
            "schema": {
              "$ref": "#/definitions/Carts"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New cart is created",
            "schema": {
              "$ref": "#/definitions/Carts"
            }
          }
        }
      }
    },
    "/carts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of cart that we want to find",
          "type": "string"
        }
      ],
      "delete": {
        "summary": "Delete cart with given ID",
        "tags": ["Carts"],
        "responses": {
          "200": {
            "description": "Cart is deleted",
            "schema": {
              "$ref": "#/definitions/Carts"
            }
          }
        }
      }
    },
    "/orders/all": {
      "get": {
        "summary": "Get all orders in system",
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        }
      }
    },
    "/orders/create": {
      "post": {
        "tags": ["Orders"],
        "summary": "Create new order in system",
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "Order that we want to create",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New order is created",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of order that we want to find",
          "type": "string"
        }
      ],
      "delete": {
        "summary": "Delete order with given ID",
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Order is deleted",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "fullname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserLogged": {
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Orders": {
      "properties": {
        "status": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "cart": {
          "type": "string"
        }
      }
    },
    "Products": {
      "properties": {
        "name": {
          "type": "string"
        },
        "quantityAvailabe": {
          "type": "number"
        },
        "costUnity": {
          "type": "number"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "Carts": {
      "properties": {
        "quantity": {
          "type": "number"
        },
        "product": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "name": "Authorization",
      "in": "header",
      "type": "apiKey",
      "description": "Enter the token with the Bearer prefix, eg: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVC"
    }
  },
  "security": [{ "bearerAuth": [] }]
}
